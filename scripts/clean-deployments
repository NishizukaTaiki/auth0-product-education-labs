#!/usr/bin/env node

/**********************************************************************
 * This script will remove all Vercel projects and GitHub repositories
 * in the case where the Vercel project links to the GitHub repository.
 *
 * It requires the following environment variables:
 * - VERCEL_TOKEN - Create it here https://vercel.com/account/tokens
 * - GITHUB_TOKEN - Create it here https://github.com/settings/tokens
 *  - requires the delete_repo scope
 *
 * You can securely store these values in 1Password and access them
 * via CLI.
 *
 * https://grantorchard.com/securing-environment-variables-with-1password/
 *
 * You can add these helper functions to your shell to automate usage.
 *
 * https://github.com/NotMyself/dotfiles/blob/master/system/.function#L6-L30
 *
 * execute as `envvars-1p && scripts/clean-deployments`
 **********************************************************************/

const axios = require("axios");
const chalk = require("chalk");
const assert = require("assert");

const VERCEL_API_URL = "https://api.vercel.com";
const GITHUB_API_URL = "https://api.github.com";

assert.ok(
  process.env.VERCEL_TOKEN,
  chalk.bold.red("VERCEL_TOKEN env var not found.")
);
assert.ok(
  process.env.GITHUB_TOKEN,
  chalk.bold.red("GITHUB_TOKEN env var not found.")
);

const vercel = axios.create({
  baseURL: VERCEL_API_URL,
  headers: {
    Authorization: `Bearer ${process.env.VERCEL_TOKEN}`,
  },
});

const github = axios.create({
  baseURL: GITHUB_API_URL,
  headers: {
    Authorization: `Bearer ${process.env.GITHUB_TOKEN}`,
  },
});

function filter(projects) {
  return projects.filter((p) => p.link && p.link.type === "github");
}

function map(projects) {
  return projects.map((p) => {
    return {
      vercel: {
        id: p.id,
        name: p.name,
      },
      github: {
        repo: p.link.repo,
        repoId: p.link.repoId,
        org: p.link.org,
      },
    };
  });
}

(async function () {
  try {
    const projects = await vercel
      .get("/v4/projects", { limit: 100 })
      .then((res) => res.data.projects)
      .then(filter)
      .then(map);

    if (projects.length === 0) {
      console.log(chalk.red("No projects found."));
      return process.exit(0);
    }

    for (const p of projects) {
      await github.delete(`/repos/${p.github.org}/${p.github.repo}`);
      await vercel.delete(`/v1/projects/${p.vercel.name}`);
      console.log(
        `${chalk.red("Deleted")} -> ${chalk.bold("Vercel:")} ${
          p.vercel.name
        } ${chalk.bold("Github:")} ${p.github.repo}`
      );
    }

    process.exit(0);
  } catch (e) {
    console.log(e);
    process.exit(1);
  }
})();
